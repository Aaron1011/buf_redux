var searchIndex = {};
searchIndex['buf_redux'] = {"items":[[3,"BufReader","buf_redux","The *pièce de résistance:* a drop-in replacement for `std::io::BufReader` with more functionality.",null,null],[3,"Unbuffer","","A `Read` adapter for a consumed `BufReader` which will empty bytes from the buffer before reading from\n`inner` directly. Frees the buffer when it has been emptied. ",null,null],[0,"strategy","","Types which can be used to tune the behavior of `BufReader`.",null,null],[3,"IfEmpty","buf_redux::strategy","A `ReadStrategy` which tells the buffer to read more data only when empty.",null,null],[3,"LessThan","","A `ReadStrategy` which returns `true` if there is fewer bytes in the buffer\nthan the provided value.",null,null],[3,"AtEndLessThan1k","","A `MoveStrategy` which tells the buffer to move data if there is no more room at the tail\nof the buffer, *and* if there is less than **1 KiB** of valid data in the buffer.",null,null],[3,"AtEndLessThan","","A `MoveStrategy` which triggers if there is no more room at the tail at the end of the buffer,\n*and* there are fewer valid bytes in the buffer than the provided value.",null,null],[3,"NeverMove","","A `MoveStrategy` which always returns `false`. Use this to restore original\n`std::io::BufReader` behavior.",null,null],[8,"ReadStrategy","","Trait for types which `BufReader` can consult to determine when it should read more data into the\nbuffer.",null,null],[10,"should_read","","Returns `true` if the buffer should read more data, `false` otherwise.",0,{"inputs":[{"name":"readstrategy"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"MoveStrategy","","Trait for types which `BufReader` can consult to determine when it should move data\nto the beginning of the buffer.",null,null],[10,"should_move","","Returns `true` if the buffer should move the data down to the beginning,\n`false` otherwise.",1,{"inputs":[{"name":"movestrategy"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[{"name":"ifempty"}],"output":{"name":"ifempty"}}],[11,"fmt","","",2,{"inputs":[{"name":"ifempty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_read","","",2,{"inputs":[{"name":"ifempty"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[{"name":"lessthan"}],"output":{"name":"lessthan"}}],[11,"fmt","","",3,{"inputs":[{"name":"lessthan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_read","","",3,{"inputs":[{"name":"lessthan"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[{"name":"atendlessthan1k"}],"output":{"name":"atendlessthan1k"}}],[11,"fmt","","",4,{"inputs":[{"name":"atendlessthan1k"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_move","","",4,{"inputs":[{"name":"atendlessthan1k"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"default","","",5,{"inputs":[{"name":"atendlessthan"}],"output":{"name":"atendlessthan"}}],[11,"fmt","","",5,{"inputs":[{"name":"atendlessthan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_move","","",5,{"inputs":[{"name":"atendlessthan"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"default","","",6,{"inputs":[{"name":"nevermove"}],"output":{"name":"nevermove"}}],[11,"fmt","","",6,{"inputs":[{"name":"nevermove"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_move","","",6,{"inputs":[{"name":"nevermove"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[6,"DefaultReadStrategy","buf_redux","",null,null],[6,"DefaultMoveStrategy","","",null,null],[11,"new","","Create a new `BufReader` wrapping `inner`, with a buffer of a\ndefault capacity and default strategies.",7,{"inputs":[{"name":"bufreader"},{"name":"r"}],"output":{"name":"self"}}],[11,"with_capacity","","Create a new `BufReader` wrapping `inner` with a capacity\nof *at least* `cap` bytes and default strategies.",7,{"inputs":[{"name":"bufreader"},{"name":"usize"},{"name":"r"}],"output":{"name":"self"}}],[11,"with_strategies","","Create a new `BufReader` wrapping `inner`, with a default buffer capacity\nand with the given `ReadStrategy` and `MoveStrategy`.",7,{"inputs":[{"name":"bufreader"},{"name":"r"},{"name":"rs"},{"name":"ms"}],"output":{"name":"self"}}],[11,"with_cap_and_strategies","","Create a new `BufReader` wrapping `inner`, with a buffer capacity of *at least*\n`cap` bytes and the given `ReadStrategy` and `MoveStrategy`.",7,{"inputs":[{"name":"bufreader"},{"name":"r"},{"name":"usize"},{"name":"rs"},{"name":"ms"}],"output":{"name":"self"}}],[11,"move_strategy","","Apply a new `MoveStrategy` to this `BufReader`, returning the transformed type.",7,{"inputs":[{"name":"bufreader"},{"name":"ms_"}],"output":{"name":"bufreader"}}],[11,"read_strategy","","Apply a new `ReadStrategy` to this `BufReader`, returning the transformed type.",7,{"inputs":[{"name":"bufreader"},{"name":"rs_"}],"output":{"name":"bufreader"}}],[11,"move_strategy_mut","","Accessor for updating the `MoveStrategy` in-place. Must be the same type.",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"ms"}}],[11,"read_strategy_mut","","Accessor for updating the `ReadStrategy` in-place. Must be the same type.",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"rs"}}],[11,"make_room","","Move data to the start of the buffer, making room at the end for more\nreading.",7,{"inputs":[{"name":"bufreader"}],"output":null}],[11,"grow","","Grow the internal buffer by *at least* `additional` bytes. May not be\nquite exact due to implementation details of the buffer&#39;s allocator.",7,{"inputs":[{"name":"bufreader"},{"name":"usize"}],"output":null}],[11,"get_buf","","Get the section of the buffer containing valid data; may be empty.",7,null],[11,"available","","Get the current number of bytes available in the buffer.",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"usize"}}],[11,"capacity","","Get the total buffer capacity.",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"usize"}}],[11,"get_ref","","Get an immutable reference to the underlying reader.",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Get a mutable reference to the underlying reader.",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes `self` and returns the inner reader only.",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner_with_buf","","Consumes `self` and returns both the underlying reader and the buffer,\nwith the data moved to the beginning and the length truncated to contain\nonly valid data.",7,null],[11,"unbuffer","","Consumes `self` and returns an adapter which implements `Read` and will\nempty the buffer before reading directly from the underlying reader.",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"unbuffer"}}],[11,"read_into_buf","","Unconditionally perform a read into the buffer, calling `.make_room()`\nif appropriate or necessary, as determined by the implementation.",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"read","","",7,null],[11,"fill_buf","","",7,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",7,{"inputs":[{"name":"bufreader"},{"name":"usize"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",7,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"is_buf_empty","","Returns `true` if the buffer still has some bytes left, `false` otherwise.",8,{"inputs":[{"name":"unbuffer"}],"output":{"name":"bool"}}],[11,"buf_len","","Returns the number of bytes remaining in the buffer.",8,{"inputs":[{"name":"unbuffer"}],"output":{"name":"usize"}}],[11,"into_inner","","Return the underlying reader, finally letting the buffer die in peace and join its family\nin allocation-heaven.",8,{"inputs":[{"name":"unbuffer"}],"output":{"name":"r"}}],[11,"read","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"unbuffer"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"ReadStrategy"],[8,"MoveStrategy"],[3,"IfEmpty"],[3,"LessThan"],[3,"AtEndLessThan1k"],[3,"AtEndLessThan"],[3,"NeverMove"],[3,"BufReader"],[3,"Unbuffer"]]};
initSearch(searchIndex);
